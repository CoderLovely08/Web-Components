package com.example.myapplication;

import android.app.Activity;
import android.app.SearchManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.net.Uri;
import android.os.Bundle;
import android.speech.RecognizerIntent;
import android.speech.tts.TextToSpeech;
import android.telephony.PhoneNumberUtils;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.Toast;
import java.net.URI;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;

public class MainActivity extends Activity {

private static final int VOICE_RECOGNITION_REQUEST_CODE = 1001;
String user = "false";
EditText metTextHint;
ListView mlvTextMatches;
Spinner msTextMatches;
Button mbtSpeak,btSpeak1;
TextToSpeech t1;

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

metTextHint = (EditText) findViewById(R.id.etTextHint);
mlvTextMatches = (ListView) findViewById(R.id.lvTextMatches);
msTextMatches = (Spinner) findViewById(R.id.sNoOfMatches);
mbtSpeak = (Button) findViewById(R.id.btSpeak);
btSpeak1 = (Button) findViewById(R.id.btSpeak1);
checkVoiceRecognition();
t1 =
new TextToSpeech(
getApplicationContext(),
new TextToSpeech.OnInitListener() {
@Override
public void onInit(int status) {
if (status != TextToSpeech.ERROR) {
t1.setLanguage(Locale.getDefault());
}
}
});


}

public void checkVoiceRecognition() {
// Check if voice recognition is present
PackageManager pm = getPackageManager();
List<ResolveInfo> activities =
pm.queryIntentActivities(new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH), 0);
if (activities.size() == 0) {
mbtSpeak.setEnabled(false);
mbtSpeak.setText("Voice recognizer not present");
Toast.makeText(this, "Voice recognizer not present", Toast.LENGTH_SHORT).show();
}
}

public void speak(View view) {

Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);

// Specify the calling package to identify your application
intent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, getClass().getPackage().getName());

// Display an hint to the user about what he should say.
intent.putExtra(RecognizerIntent.EXTRA_PROMPT, metTextHint.getText().toString());

// Given an hint to the recognizer about what the user is going to say
// There are two form of language model available
// 1.LANGUAGE_MODEL_WEB_SEARCH : For short phrases
// 2.LANGUAGE_MODEL_FREE_FORM  : If not sure about the words or phrases and its domain.
intent.putExtra(
RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_WEB_SEARCH);

// If number of Matches is not selected then return show toast message
if (msTextMatches.getSelectedItemPosition() == AdapterView.INVALID_POSITION) {
Toast.makeText(this, "Please select No. of Matches from spinner", Toast.LENGTH_SHORT).show();
return;
}

int noOfMatches = Integer.parseInt(msTextMatches.getSelectedItem().toString());
// Specify how many results you want to receive. The results will be
// sorted where the first result is the one with higher confidence.
intent.putExtra(RecognizerIntent.EXTRA_MAX_RESULTS, noOfMatches);
// Start the Voice recognizer activity for the result.
startActivityForResult(intent, VOICE_RECOGNITION_REQUEST_CODE);
}

@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
if (requestCode == VOICE_RECOGNITION_REQUEST_CODE)

// If Voice recognition is successful then it returns RESULT_OK
if (resultCode == RESULT_OK) {

ArrayList<String> textMatchList =
data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);

if (!textMatchList.isEmpty()) {
// If first Match contains the 'search' word
// Then start web search.
if (textMatchList.get(0).contains("open YouTube")) {
Intent launchIntent =
getPackageManager().getLaunchIntentForPackage("com.google.android.youtube");
if (launchIntent != null) {
String searchQuery = textMatchList.get(0);
searchQuery = searchQuery.replace("search", "");
Intent search = new Intent(Intent.ACTION_SEARCH);
search.setPackage("com.google.android.youtube");
search.putExtra(SearchManager.QUERY, searchQuery);
startActivity(search);
startActivity(launchIntent);
play();
user = "continue";
}
mlvTextMatches.setAdapter(
new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, textMatchList));

String str = (String) mlvTextMatches.getItemAtPosition(0);
metTextHint.setText(str);
} else {
// populate the Matches
mlvTextMatches.setAdapter(
new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, textMatchList));

String str = (String) mlvTextMatches.getItemAtPosition(0);
metTextHint.setText(str);
}
}
// Result code for various error.
} else if (resultCode == RecognizerIntent.RESULT_AUDIO_ERROR) {
showToastMessage("Audio Error");
} else if (resultCode == RecognizerIntent.RESULT_CLIENT_ERROR) {
showToastMessage("Client Error");
} else if (resultCode == RecognizerIntent.RESULT_NETWORK_ERROR) {
showToastMessage("Network Error");
} else if (resultCode == RecognizerIntent.RESULT_NO_MATCH) {
showToastMessage("No Match");
} else if (resultCode == RecognizerIntent.RESULT_SERVER_ERROR) {
showToastMessage("Server Error");
}
super.onActivityResult(requestCode, resultCode, data);
}
/** Helper method to show the toast message */
void showToastMessage(String message) {
Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
}

Runnable r =
new Runnable() {
public void run() {
try {

String str = "opening YouTube";
Toast.makeText(getApplicationContext(), str, Toast.LENGTH_SHORT).show();
t1.speak(str, TextToSpeech.QUEUE_FLUSH, null);
Thread.sleep(1500);
String str1 = "what do you want to play";
Toast.makeText(getApplicationContext(), str, Toast.LENGTH_SHORT).show();
t1.speak(str1, TextToSpeech.QUEUE_FLUSH, null);
String searchQuery = "Old town road";
Intent search = new Intent(Intent.ACTION_SEARCH);
search.setPackage("com.google.android.youtube");
search.putExtra(SearchManager.QUERY, searchQuery);
startActivity(search);
} catch (Exception e) {
metTextHint.setText("error");
e.printStackTrace();
}
;
}
};

public void play() {
/* Thread t = new Thread(r);
t.run();*/


}

protected void onStart() {
super.onStart();

welcomeMsg();
}

public void continueMic(View v) {



String num = "918766405835";
String message="Heyy";
try {
String smsNumber = "918766405835"; // E164 format without '+' sign
Intent sendIntent = new Intent("android.intent.action.MAIN");
sendIntent.setComponent(new ComponentName("com.whatsapp", "com.whatsapp.Conversation"));
sendIntent.putExtra("jid", PhoneNumberUtils.stripSeparators(smsNumber) + "@s.whatsapp.net");//phone number without "+" prefix

startActivity(sendIntent);
}
catch (Exception e){
e.printStackTrace();

Toast.makeText(this, "Some error has occurred.", Toast.LENGTH_SHORT).show();
}


}

public void welcomeMsg()
{
try{
LocalDate date = LocalDate.now();
String text="Welcome Back sir, it's "+date.toString()+",This is your assistant, Sofiya. Tell me how can i help you?";
String str = text;
Toast.makeText(getApplicationContext(), str, Toast.LENGTH_SHORT).show();
t1.speak(str, TextToSpeech.QUEUE_FLUSH, null);
listen();
}
catch (Exception e)
{
String str="Oops some error has occurred!";
t1.speak(str, TextToSpeech.QUEUE_FLUSH, null);
}
}

public void listen(View v)
{
Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);

intent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, getClass().getPackage().getName());

intent.putExtra(RecognizerIntent.EXTRA_PROMPT, metTextHint.getText().toString());

intent.putExtra(
RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_WEB_SEARCH);

if (msTextMatches.getSelectedItemPosition() == AdapterView.INVALID_POSITION) {
Toast.makeText(this, "Please select No. of Matches from spinner", Toast.LENGTH_SHORT).show();
return;
}
int noOfMatches = Integer.parseInt(msTextMatches.getSelectedItem().toString());
intent.putExtra(RecognizerIntent.EXTRA_MAX_RESULTS, noOfMatches);
startActivityForResult(intent, VOICE_RECOGNITION_REQUEST_CODE);
}
}